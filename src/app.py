import streamlit as st
import pandas as pd
import plotly.express as px
import re

# Opcional (para o mapa)
import folium
from streamlit_folium import st_folium
from geopy.geocoders import Nominatim
from geopy.extra.rate_limiter import RateLimiter

# =========================
# Configura√ß√£o b√°sica
# =========================
st.set_page_config(page_title="Im√≥veis SP", layout="wide")
st.title("üè† Im√≥veis em S√£o Paulo - VivaReal")

# =========================
# Carregamento de dados (cache)
# =========================
@st.cache_data
def load_data():
    df = pd.read_csv('data/imoveis_vivareal.csv')
    # Em alguns ambientes seu CSV pode usar "Descricao" sem acento ‚Äî normalize:
    if 'Descri√ß√£o' not in df.columns and 'Descricao' in df.columns:
        df.rename(columns={'Descricao': 'Descri√ß√£o'}, inplace=True)
    df.dropna(subset=['Descri√ß√£o'], inplace=True)
    df.drop_duplicates(inplace=True)
    return df

df = load_data()

# =========================
# Extra√ß√£o de informa√ß√µes
# =========================
re_quartos = re.compile(r'(\d+)\s+quarto[s]?', re.IGNORECASE)
re_banheiros = re.compile(r'(\d+)\s+banheiro[s]?', re.IGNORECASE)
re_area = re.compile(r'(\d{2,4})\s?m¬≤', re.IGNORECASE)
re_preco = re.compile(r'R\$\s?([\d\.\,]+)', re.IGNORECASE)
# Tenta capturar ‚Äúem Vila Ol√≠mpia‚Äù, ‚Äúno Brooklin‚Äù, ‚Äúna Bela Vista‚Äù, etc.
re_bairro = re.compile(r'\b(?:em|no|na|nos|nas)\s+([A-Za-z√Ä-√ø\s\-]+?)(?:\s*[-,]|$)', re.IGNORECASE)

def extrair_info(texto: str) -> dict:
    texto = texto or ""
    q = re_quartos.search(texto)
    b = re_banheiros.search(texto)
    a = re_area.search(texto)
    p = re_preco.search(texto)
    bairro_m = re_bairro.search(texto)

    preco = None
    if p:
        preco = int(p.group(1).replace('.', '').replace(',', ''))

    return {
        'Quartos': int(q.group(1)) if q else None,
        'Banheiros': int(b.group(1)) if b else None,
        '√Årea': int(a.group(1)) if a else None,
        'Pre√ßo': preco,
        'Bairro': bairro_m.group(1).strip() if bairro_m else None
    }

info_df = df['Descri√ß√£o'].fillna('').apply(extrair_info).apply(pd.Series)
df = pd.concat([df, info_df], axis=1)

# =========================
# Sidebar: Filtros
# =========================
st.sidebar.header("Filtros")

min_quartos = int(df['Quartos'].min()) if not df['Quartos'].isna().all() else 1
max_quartos = int(df['Quartos'].max()) if not df['Quartos'].isna().all() else 5
quartos = st.sidebar.slider("N√∫mero m√≠nimo de quartos", min_quartos, max_quartos, min_quartos)

min_area = int(df['√Årea'].min()) if not df['√Årea'].isna().all() else 10
max_area = int(df['√Årea'].max()) if not df['√Årea'].isna().all() else 300
area_min = st.sidebar.slider("√Årea m√≠nima (m¬≤)", min_area, max_area, min_area)

# Filtro opcional por bairro (s√≥ mostra valores n√£o nulos)
bairros_validos = sorted([b for b in df['Bairro'].dropna().unique().tolist() if isinstance(b, str)])[:50]
bairro_sel = st.sidebar.multiselect("Bairro (opcional)", options=bairros_validos)

# Faixa de pre√ßo (se houver algum pre√ßo extra√≠do)
if df['Pre√ßo'].notna().any():
    preco_min = int(df['Pre√ßo'].min())
    preco_max = int(df['Pre√ßo'].max())
    faixa_preco = st.sidebar.slider("Faixa de pre√ßo (R$)", preco_min, preco_max, (preco_min, preco_max))
else:
    faixa_preco = None

# =========================
# Aplicando filtros
# =========================
df_filtrado = df[
    (df['Quartos'].fillna(0) >= quartos) &
    (df['√Årea'].fillna(0) >= area_min)
]

if bairro_sel:
    df_filtrado = df_filtrado[df_filtrado['Bairro'].isin(bairro_sel)]

if faixa_preco:
    mn, mx = faixa_preco
    df_filtrado = df_filtrado[(df_filtrado['Pre√ßo'].fillna(0) >= mn) & (df_filtrado['Pre√ßo'].fillna(0) <= mx)]

# =========================
# KPIs
# =========================
colA, colB, colC = st.columns(3)
with colA:
    st.metric("Im√≥veis encontrados", len(df_filtrado))
with colB:
    media_area = int(df_filtrado['√Årea'].dropna().mean()) if not df_filtrado['√Årea'].dropna().empty else 0
    st.metric("√Årea m√©dia (m¬≤)", media_area)
with colC:
    if df_filtrado['Pre√ßo'].notna().any():
        media_preco = int(df_filtrado['Pre√ßo'].dropna().mean())
        st.metric("Pre√ßo m√©dio (R$)", media_preco)
    else:
        st.metric("Pre√ßo m√©dio (R$)", "‚Äî")

# =========================
# Abas
# =========================
tab1, tab2, tab3 = st.tabs(["üìã Tabela", "üìà Gr√°ficos", "üìç Mapa"])

with tab1:
    st.subheader("üîç Im√≥veis filtrados")
    cols_show = ['Descri√ß√£o', 'Bairro', '√Årea', 'Quartos', 'Banheiros', 'Pre√ßo', 'Link']
    cols_show = [c for c in cols_show if c in df_filtrado.columns]
    st.dataframe(df_filtrado[cols_show].reset_index(drop=True), use_container_width=True)

    st.download_button(
        "‚¨áÔ∏è Baixar CSV filtrado",
        data=df_filtrado.to_csv(index=False).encode('utf-8-sig'),
        file_name="imoveis_filtrados.csv",
        mime="text/csv"
    )

with tab2:
    c1, c2 = st.columns(2)
    with c1:
        fig = px.histogram(df_filtrado, x='√Årea', nbins=30, title='Distribui√ß√£o de √Årea √ötil')
        st.plotly_chart(fig, use_container_width=True)
    with c2:
        if df_filtrado['Pre√ßo'].notna().any():
            figp = px.box(df_filtrado.dropna(subset=['Pre√ßo']), y='Pre√ßo', title='Distribui√ß√£o de Pre√ßo')
            st.plotly_chart(figp, use_container_width=True)
        else:
            st.info("Sem dados de pre√ßo para exibir boxplot.")

    fig2 = px.scatter(
        df_filtrado, x='√Årea', y='Quartos', color='Banheiros',
        title='√Årea vs. Quartos (colorido por Banheiros)',
        hover_data=[c for c in ['Descri√ß√£o', 'Bairro', 'Pre√ßo', 'Link'] if c in df_filtrado.columns]
    )
    st.plotly_chart(fig2, use_container_width=True)

with tab3:
    st.caption("Ajuste os filtros para refinar o mapa. Geocodifica√ß√£o por bairro (aproxima√ß√£o).")

    # Geocodifica√ß√£o com cache por bairro
    @st.cache_data
    def geocode_bairros(bairros: list):
        geolocator = Nominatim(user_agent="localizacao_imoveis_sp")
        geocode = RateLimiter(geolocator.geocode, min_delay_seconds=1, swallow_exceptions=True)
        cache = {}
        for b in bairros:
            if not b or not isinstance(b, str):
                cache[b] = (None, None)
                continue
            loc = geocode(f"{b}, S√£o Paulo, Brasil")
            if loc:
                cache[b] = (loc.latitude, loc.longitude)
            else:
                cache[b] = (None, None)
        return cache

    # S√≥ tenta geocodificar se houver bairros
    bairros_map = df_filtrado['Bairro'].dropna().unique().tolist()
    if len(bairros_map) == 0:
        st.info("N√£o h√° bairros identificados nas descri√ß√µes ap√≥s os filtros.")
    else:
        cache_coords = geocode_bairros(bairros_map)
        df_filtrado['Latitude'], df_filtrado['Longitude'] = zip(*df_filtrado['Bairro'].map(cache_coords).apply(lambda x: (x[0], x[1])))

        df_mapa = df_filtrado.dropna(subset=['Latitude', 'Longitude'])
        if df_mapa.empty:
            st.warning("N√£o foi poss√≠vel geocodificar os bairros filtrados.")
        else:
            m = folium.Map(location=[-23.5505, -46.6333], zoom_start=12, tiles="CartoDB positron")

            from folium.plugins import MarkerCluster
            cluster = MarkerCluster().add_to(m)

            for _, row in df_mapa.iterrows():
                popup_html = f"""
                    <b>{row.get('Descri√ß√£o','')}</b><br>
                    Bairro: {row.get('Bairro','‚Äî')}<br>
                    √Årea: {row.get('√Årea','‚Äî')} m¬≤<br>
                    Quartos: {row.get('Quartos','‚Äî')} | Banheiros: {row.get('Banheiros','‚Äî')}<br>
                    Pre√ßo: R$ {row.get('Pre√ßo','‚Äî')}<br>
                    <a href="{row.get('Link','#')}" target="_blank">Abrir an√∫ncio</a>
                """
                folium.Marker(
                    location=[row['Latitude'], row['Longitude']],
                    tooltip=f"{row.get('Bairro','SP')} ‚Ä¢ {row.get('√Årea','‚Äî')}m¬≤ ‚Ä¢ {row.get('Quartos','‚Äî')}q",
                    popup=folium.Popup(popup_html, max_width=300),
                    icon=folium.Icon(color="blue", icon="home", prefix="fa")
                ).add_to(cluster)

            st_folium(m, use_container_width=True, height=520)

